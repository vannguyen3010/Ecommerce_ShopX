@inject ProductServices ProductServices
@using Helpers
@rendermode InteractiveServer


<aside class="sidebar shop-sidebar sticky-sidebar-wrapper sidebar-fixed">
    <!-- Start of Sidebar Overlay -->
    <div class="sidebar-overlay"></div>
    <a class="sidebar-close" href="#"><i class="close-icon"></i></a>

    <!-- Start of Sidebar Content -->
    <div class="sidebar-content scrollable">
        <!-- Start of Sticky Sidebar -->
        <div class="sticky-sidebar">
            <!-- Start of Collapsible Widget -->
            <div class="widget widget-collapsible">
                <h3 class="widget-title"><label>Price</label></h3>
                <div class="widget-body">
                    <ul class="filter-items search-ul">
                        <li><a >0.00 - 100.00</a></li>
                        <li><a >100.00 - $200.00</a></li>
                        <li><a >200.00 - 300.00</a></li>
                        <li><a >300.00 - 500.00</a></li>
                        <li><a >500.00+</a></li>
                    </ul>
                    <form class="price-range">
                        <input type="number" name="min_price" class="min_price text-center"
                               placeholder="$min"><span class="delimiter">-</span><input type="number" name="max_price" class="max_price text-center"
                                                                                         placeholder="$max"><a
                                                                                                               class="btn btn-primary btn-rounded">Go</a>
                    </form>
                </div>
            </div>

        </div>
        <!-- End of Sidebar Content -->
    </div>
    <!-- End of Sidebar Content -->
</aside>

<div class="main-content">
    <!-- Start of Shop Banner -->
    <div class="owl-carousel owl-theme"
         data-owl-options="{
        'loop': true,
        'autoplay': true,
        'autoplayTimeout': 5000,
        'nav': true,
        'dots': true,
        'margin': 20,
        'responsive': {
            '0': {
                'items': 1
            },
            '576': {
                'items': 1
            },
            '768': {
                'items': 1
            },
            '992': {
                'items': 1
            },
            '1200': {
                'items': 1
            }
        }
     }">
        @if (bannerProducts != null && bannerProducts.Any())
        {
            @foreach (var item in bannerProducts)
            {
                <div class="shop-default-banner shop-boxed-banner banner d-flex align-items-center mb-6 br-xs"
                     style="background-image: url('@(string.IsNullOrEmpty(item.FilePath) ? "/Img_Dev/banner.png" : item.FilePath)'); background-color: #494844;"
                     onerror="this.onerror=null;this.src='/Img_Dev/banner.png';">
                    <div class="banner-content">
                        <h4 class="banner-subtitle font-weight-normal text-uppercase text-white ls-normal">
                            @item.Title
                        </h4>
                        <h3 class="banner-title text-white text-capitalize ls-25">@item.Desc</h3>
                        <a href=""
                           class="btn btn-white btn-rounded btn-icon-right btn-outline">
                            Xem thêm<i class="w-icon-long-arrow-right"></i>
                        </a>
                    </div>
                </div>
            }
        }
    </div>

    <div class="product-wrapper row cols-lg-4 cols-md-3 cols-sm-2 cols-2">
        @if (products != null && products.Any())
        {
            @foreach (var item in products)
            {
                <div class="product-wrap">
                    <div class="product text-center img__wrapper">
                        <figure class="product-media spotlight">
                            <a href="/san-pham/@item.NameSlug/@item.Id">
                                <img src="@(string.IsNullOrEmpty(item.ImageFilePath) ? "/Img_Dev/banner.png" : item.ImageFilePath)" alt="Product"
                                     width="300" height="338" onerror="this.onerror=null;this.src='/Img_Dev/banner.png';" />
                            </a>
                        </figure>
                        <img src="http://www.savoy-sharm.com/media-room/images/hi-res/king-bed-room-accommodation-savoy-luxury-5-stars-accommodation-sharm-el-sheikh.jpg" alt="" />
                        @if (item.Discount > 1)
                        {
                            <a class="sold_out">- @item.Discount.ToString("N0") </a>
                        }
                        <div class="product-details">
                            <h4 class="product-name"><a href="/san-pham/@item.NameSlug/@item.Id">@item.Name</a></h4>
                            <div class="ratings-container">
                                <div class="star-rating">
                                    @for (int i = 0; i < item.Rating; i++)
                                    {
                                        <span class="fa fa-star checked"></span>
                                    }
                                    @for (int i = 0; i < (5 - item.Rating); i++)
                                    {
                                        <span class="fa fa-star"></span>
                                    }

                                </div>
                            </div>
                            <div class="product-price">
                                <del class="old-price">@item.Price.ToString("N0")  <span class="currency-symbol">đ</span>  </del>
                                <ins class="new-price text-danger">@((item.Price - item.Discount).ToString("N0")) <span class="currency-symbol">đ</span></ins>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <div class="toolbox toolbox-pagination justify-content-between">
        <p class="showing-info mb-2 mb-sm-0">
            Showing <span>@((currentPage - 1) * pageSize + 1)-@(Math.Min(currentPage * pageSize, totalCount))</span> of @totalCount Products
        </p>
        <ul class="pagination">
            <li class="prev @(currentPage == 1 ? "disabled" : "")">
                <a href="javascript:void(0)" @onclick="PreviousPage" aria-label="Previous" tabindex="-1" aria-disabled="@(currentPage == 1)">
                    <i class="w-icon-long-arrow-left"></i> Prev
                </a>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" href="javascript:void(0)" @onclick="(() => ChangePage(i))">@i</a>
                </li>
            }
            <li class="next @(currentPage == totalPages ? "disabled" : "")">
                <a href="javascript:void(0)" @onclick="NextPage" aria-label="Next">
                    Next <i class="w-icon-long-arrow-right"></i>
                </a>
            </li>
        </ul>
    </div>



</div>

@code {
    private IEnumerable<BannerProductDto> bannerProducts;
    private IEnumerable<ProductDto> products;

    private int currentPage = 1;
    private int pageSize = 1;
    private int totalPages;
    private int totalCount;

    private Guid? categoryId = null;
    private decimal? minPrice = null;
    private decimal? maxPrice = null;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("c1", out var c1Id))
        {
            categoryId = new Guid(c1Id!);
            await LoadListProducts();
        }
        else if (query.TryGetValue("c2", out var c2Id))
        {
            categoryId = new Guid(c2Id!);
            await LoadListProducts();
        }

        // if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("currentPage", out var page))
        // {
        //     int.TryParse(page, out currentPage);
        // }
        if (query.TryGetValue("pageNumber", out var page))
        {
            int.TryParse(page, out currentPage);
        }

        if (query.TryGetValue("pageSize", out var size))
        {
            int.TryParse(size, out pageSize);
        }
        await LoadListProducts();
        await LoadBannerProducts();
    }

    private async Task LoadBannerProducts()
    {
        var response = await ProductServices.GetAllBannerPositionProductPopup(BannerProductWithPopupPosition.Product);
        if (response != null && response.Any())
        {
            bannerProducts = response.ToList();
        }
        else
        {
            bannerProducts = new List<BannerProductDto>();
        }
    }
    private async Task LoadListProducts()
    {
        var response = await ProductServices.GetListProductAsync(currentPage, pageSize, minPrice, maxPrice, categoryId);
        if (response != null && response.Success)
        {
            products = response.Data.Products;
            totalCount = response.Data.TotalCount;
            totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
        }
        else
        {
            products = new List<ProductDto>();
        }
    }
    private async Task ChangePage(int page)
    {
        // Chỉ cập nhật nếu page khác currentPage
        if (page != currentPage)
        {
            currentPage = page;
            await UpdateUrlAndLoadProducts();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await UpdateUrlAndLoadProducts();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await UpdateUrlAndLoadProducts();
        }
    }
    private async Task UpdateUrlAndLoadProducts()
    {
        // Tạo URL mới với thông tin trang hiện tại và kích thước trang
        var newUrl = $"san-pham?pageNumber={currentPage}&pageSize={pageSize}";

        // Cập nhật URL mà không tải lại toàn bộ trang
        NavigationManager.NavigateTo(newUrl, forceLoad: false);

        // Tải lại danh sách sản phẩm
        await LoadListProducts();
    }
}