@inject ProductServices ProductServices
<style>
    .pagination {
        margin-top: 20px;
    }

    .page-button {
        margin: 0 5px;
        padding: 5px 10px;
        border: none;
        background-color: #007bff;
        color: white;
        cursor: pointer;
    }

        .page-button:hover {
            background-color: #0056b3;
        }
</style>
<div class="main-content">
    <!-- Start of Shop Banner -->
    <div class="owl-carousel owl-theme"
         data-owl-options="{
        'loop': true,
        'autoplay': true,
        'autoplayTimeout': 5000,
        'nav': true,
        'dots': true,
        'margin': 20,
        'responsive': {
            '0': {
                'items': 1
            },
            '576': {
                'items': 1
            },
            '768': {
                'items': 1
            },
            '992': {
                'items': 1
            },
            '1200': {
                'items': 1
            }
        }
     }">
        @if (bannerProducts != null && bannerProducts.Any())
        {
            @foreach (var item in bannerProducts)
            {
                <div class="shop-default-banner shop-boxed-banner banner d-flex align-items-center mb-6 br-xs"
                     style="background-image: url('@(string.IsNullOrEmpty(item.FilePath) ? "/Img_Dev/banner.png" : item.FilePath)'); background-color: #494844;"
                     onerror="this.onerror=null;this.src='/Img_Dev/banner.png';">
                    <div class="banner-content">
                        <h4 class="banner-subtitle font-weight-normal text-uppercase text-white ls-normal">
                            @item.Title
                        </h4>
                        <h3 class="banner-title text-white text-capitalize ls-25">@item.Desc</h3>
                        <a href=""
                           class="btn btn-white btn-rounded btn-icon-right btn-outline">
                            Xem thêm<i class="w-icon-long-arrow-right"></i>
                        </a>
                    </div>
                </div>
            }
        }
    </div>

    <div class="product-wrapper row cols-lg-4 cols-md-3 cols-sm-2 cols-2">
        @if (products != null && products.Any())
        {
            @foreach (var item in products)
            {
                <div class="product-wrap">
                    <div class="product text-center img__wrapper">
                        <figure class="product-media spotlight">
                            <a href="/san-pham/@item.NameSlug/@item.Id">
                                <img src="@(string.IsNullOrEmpty(item.ImageFilePath) ? "/Img_Dev/banner.png" : item.ImageFilePath)" alt="Product"
                                     width="300" height="338" onerror="this.onerror=null;this.src='/Img_Dev/banner.png';" />
                            </a>
                        </figure>
                        <img src="http://www.savoy-sharm.com/media-room/images/hi-res/king-bed-room-accommodation-savoy-luxury-5-stars-accommodation-sharm-el-sheikh.jpg" alt="" />
                        @if (item.Discount > 1)
                        {
                            <a class="sold_out">- @item.Discount.ToString("N0") </a>
                        }
                        <div class="product-details">
                            <h4 class="product-name"><a href="/san-pham/@item.NameSlug/@item.Id">@item.Name</a></h4>
                            <div class="ratings-container">
                                <div class="star-rating">
                                    @for (int i = 0; i < item.Rating; i++)
                                    {
                                        <span class="fa fa-star checked"></span>
                                    }
                                    @for (int i = 0; i < (5 - item.Rating); i++)
                                    {
                                        <span class="fa fa-star"></span>
                                    }

                                </div>
                            </div>
                            <div class="product-price">
                                <del class="old-price">@item.Price.ToString("N0")  <span class="currency-symbol">đ</span>  </del>
                                <ins class="new-price text-danger">@((item.Price - item.Discount).ToString("N0")) <span class="currency-symbol">đ</span></ins>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <div class="toolbox toolbox-pagination justify-content-between">
        <p class="showing-info mb-2 mb-sm-0">
            Showing<span>1-12 of 60</span>Products
        </p>
        <div>
            <button @onclick="PreviousPage" disabled="@isFirstPage">Previous</button>
            <span>Page @currentPage of @totalPages</span>
            <button @onclick="NextPage" disabled="@isLastPage">Next</button>
        </div>
        @*  <ul class="pagination">
        <li class="prev disabled">
        <button @onclick="GoToPreviousPage" disabled="@(currentPage == 1)" aria-label="Previous" tabindex="-1" aria-disabled="true">
        <i class="w-icon-long-arrow-left"></i>Prev
        </button>
        </li>
        <li class="page-item active">
        <a class="page-link" href="#">1</a>
        </li>
        <li class="page-item">
        <a class="page-link" href="#">2</a>
        </li>
        <li class="next">
        <button @onclick="GoToNextPage" disabled="@(currentPage * pageSize >= totalCount)" aria-label="Next">
        Next<i class="w-icon-long-arrow-right"></i>
        </button>
        </li>
        </ul> *@
    </div>
</div>

@code {
    private IEnumerable<BannerProductDto> bannerProducts;
    private IEnumerable<ProductDto> products;
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages;
    private bool isFirstPage => currentPage == 1;
    private bool isLastPage => currentPage == totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsFromUrl();
        bannerProducts = await ProductServices.GetAllBannerPositionProductPopup(BannerProductWithPopupPosition.Product);

    }

    // Đọc tham số từ URL và gọi API
    private async Task LoadProductsFromUrl()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);

        if (queryParameters.TryGetValue("pageNumber", out var pageNumberValue))
        {
            currentPage = int.Parse(pageNumberValue);
        }

        if (queryParameters.TryGetValue("pageSize", out var pageSizeValue))
        {
            pageSize = int.Parse(pageSizeValue);
        }

        await LoadProducts();
    }
    // Hàm gọi API để lấy danh sách sản phẩm
    private async Task LoadProducts()
    {
        var response = await ProductServices.GetAllProductsPagination(currentPage, pageSize);

        if (response != null && response.Success)
        {
            products = response.Data.Products;
            totalPages = (int)Math.Ceiling((double)response.Data.TotalCount / pageSize);
        }
    }
    // Điều hướng đến trang trước đó
    private async Task PreviousPage()
    {
        Console.WriteLine("Previous Page clicked");
        if (!isFirstPage)
        {
            currentPage--;
            UpdateUrl();
            await LoadProducts();
        }
    }

    // Điều hướng đến trang tiếp theo
    private async Task NextPage()
    {
        Console.WriteLine("Previous Page clicked");
        if (!isLastPage)
        {
            currentPage++;
            UpdateUrl();
            await LoadProducts();
        }
    }
    // Cập nhật URL với tham số trang mới
    private void UpdateUrl()
    {
        NavigationManager.NavigateTo($"/san-pham?pageNumber={currentPage}&pageSize={pageSize}", true);
    }
}